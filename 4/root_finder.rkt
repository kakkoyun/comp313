#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 87 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Inconsolata\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 250 13 13 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 136 160 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 248 242 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 38 114 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 248 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 182 54 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 182 54 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 230 219 116 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 174 129 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 234 186 137 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 90 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 234 186 137 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 238 8 8 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 238 8 8 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 38 114 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 17 #"DejaVu Sans Mono\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 75 17 #"DejaVu Sans Mono\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 18 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 16 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 1492 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"test-engine/racket-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 50 #";; Imported because I need a check-range function."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 29 #"lang/htdp-intermediate-lambda"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 25 #";; Author : Kemal Akkoyun"
0 0 24 29 1 #"\n"
0 0 18 3 24 #";; Student ID : 11076004"
0 0 24 29 1 #"\n"
0 0 18 3 73
(
 #";; Source : Structure and Interpretation Of Computer Programs - MIT "
 #"Press"
) 0 0 24 29 1 #"\n"
0 0 18 3 61
#";;          Christopher J. K. Stephenson's Comp 313 Lectures."
0 0 24 29 1 #"\n"
0 0 18 3 36 #";; Information : Comp313 - Project 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";;;;;;;;;;;;;;;;; NEWTON'S METHOD for ROOT FIND ;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 74
(
 #";; Following code based on Chris Stephenson's lecture notes and SICP"
 #" book."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 45 #";; sqrt-iter : number number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; purpose : a helper function which tries guesses iteratively to fi"
 #"nd sqrt."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"good-enough?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"improve-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 1 #"x"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 36 #";; average : number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 57 #";; purpose : a funtion to find average of given 2 number."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 35 #";; square : number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 50 #";; purpose : a function produce square of a number"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 42 #";; improve-guess : number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 52 #";; purpose : a funtion attempt to find better guess."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 13 #"improve-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 7 #"average"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; good-enough? : number number number -> boolean"
0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";; purpose : a function to check whether given guess is good enough "
 #"or not."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"good-enough?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 26 #";; sqrt : number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 60
#";; purpose : a function to find square root of given number."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 24 3 1 #" "
0 0 22 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 22 3 62
#"000000000000000000000000000000000000000000000000000000000000.1"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"newtons-sqrt"
0 0 24 3 1 #" "
0 0 22 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"3"
0 0 24 3 1 #" "
0 0 22 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 78
(
 #";; ================================================================="
 #"======  ;;"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 69
(
 #";; is-good-enough? : (number -> number) number -> (number -> boolean"
 #")"
) 0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; Purpose : a function that creates a function that compares expect"
 #"ed value"
) 0 0 24 29 1 #"\n"
0 0 18 3 44 #";; and error after apllying given procedure."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 13 #";; Template :"
0 0 24 29 1 #"\n"
0 0 18 3 34 #";;(define (good-enough? ... error)"
0 0 24 29 1 #"\n"
0 0 18 3 10 #";; (\316\273 ..."
0 0 24 29 1 #"\n"
0 0 18 3 31 #";;  (<= (abs (- ... x)) error))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 7         169 4           0 0           0 27 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"is-good-enough?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"error"
0 0 24 3 3 #")))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"i"
0 0 14 3 1 #"s"
0 0 14 3 1 #"-"
0 0 14 3 1 #"g"
0 0 14 3 5 #"ood-e"
0 0 14 3 3 #"nou"
0 0 14 3 1 #"g"
0 0 14 3 2 #"h?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 2 #"er"
0 0 14 3 1 #"r"
0 0 14 3 2 #"or"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 16 3 3 #"let"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"c"
0 0 14 3 1 #"o"
0 0 14 3 6 #"mplex?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 57 #";; A constant, an epsilon value to use at approximations."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"DX"
0 0 24 3 1 #" "
0 0 22 3 2 #"0."
0 0 22 3 1 #"0"
0 0 22 3 1 #"0"
0 0 22 3 3 #"001"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 52 #";; deriv : (number -> number) -> (number -> number) "
0 0 24 29 1 #"\n"
0 0 18 3 66
#";; purpose: a function to calculate derivative of a given function"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 12 #";; Template:"
0 0 24 29 1 #"\n"
0 0 18 3 19 #";;(define (deriv f)"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";;  (lambda (x)"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";;    (...f...)"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";;          ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"DX"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 2 #"DX"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; make-fixed-point : (number -> number) -> (number -> number)"
0 0 24 29 1 #"\n"
0 0 18 3 69
(
 #";; purpose : basically, a generalization over improve-guess function"
 #"."
) 0 0 24 29 1 #"\n"
0 0 18 3 73
(
 #";; This a helper function that try to find a fixed point which is f("
 #"x)=0."
) 0 0 24 29 1 #"\n"
0 0 18 3 32 #";; As Chris's stated in lecture:"
0 0 24 29 1 #"\n"
0 0 18 3 41 #";; new-guess = guess - f(guess)/f'(guess)"
0 0 24 29 1 #"\n"
0 0 18 3 81
(
 #";; In this case, it is trying to find a better approximation for an "
 #"x which makes"
) 0 0 24 29 1 #"\n"
0 0 18 3 10 #";; f(x)=0."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 12 #";; Template:"
0 0 24 29 1 #"\n"
0 0 18 3 30 #";;(define (make-fixed-point f)"
0 0 24 29 1 #"\n"
0 0 18 3 11 #";;  (\316\273 (x)"
0 0 24 29 1 #"\n"
0 0 18 3 23 #";;    (... x  ... (f x)"
0 0 24 29 1 #"\n"
0 0 18 3 11 #";;       ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"make-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 64
#";; find-fixed-point : (number -> number) number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; Purpose : To find a fixed point of a given function f(x)=0."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 13 #";; template :"
0 0 24 29 1 #"\n"
0 0 18 3 42 #";;(define (find-fixed-point f guess error)"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";;  (if ... ..."
0 0 24 29 1 #"\n"
0 0 18 3 39 #";;  (find-fixed-point f ...guess error)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 16 #"find-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 18 3 28 #";; is it really fixed point?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 15 #"is-good-enough?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 16 #"find-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 18 3 30 #";; good guess but not enough, "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 18 3 49 #";; try to make another fixed-point and try again!"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 16 #"make-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 58
#";; A constant, used over and over my guesses start with 1,"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-GUESS"
0 0 24 3 1 #" "
0 0 22 3 3 #"1.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; A constant, an error value for approximations."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"ERROR"
0 0 24 3 1 #" "
0 0 22 3 6 #"0.0000"
0 0 22 3 1 #"0"
0 0 22 3 2 #"01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 56 #";; A constant, that states an upper limit of iterations."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"ITERATION-LIMIT"
0 0 24 3 1 #" "
0 0 22 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 57 #";; find-root : (number -> number) number number -> number"
0 0 24 29 1 #"\n"
0 0 18 3 61
#";; Purpose : To find root of a function of we say polynomial."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 13 #";; Template :"
0 0 24 29 1 #"\n"
0 0 18 3 23 #";;(define (find-root f)"
0 0 24 29 1 #"\n"
0 0 18 3 27 #";;  (find-fixed-point ... )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"find-root"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 16 #"find-fixed-point"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 16 #"make-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"find-root"
0 0 24 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-GUESS"
0 0 24 3 1 #" "
0 0 14 3 5 #"ERROR"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #" "
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 2 #" ("
0 0 14 3 9 #"find-root"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-GUESS"
0 0 24 3 1 #" "
0 0 14 3 5 #"ERROR"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 2 #"-1"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"check-range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"find-root"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 13 #"INITIAL-GUESS"
0 0 24 3 1 #" "
0 0 14 3 5 #"ERROR"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 11 #"check-range"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 9 #"find-root"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 13 #"INITIAL-GUESS"
0 0 18 3 1 #" "
0 0 18 3 5 #"ERROR"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"0"
0 0 18 3 1 #" "
0 0 18 3 2 #"1)"
0 0 24 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 11 #"check-range"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 9 #"find-root"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"+"
0 0 18 3 1 #" "
0 0 18 3 1 #"5"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"+"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 13 #"INITIAL-GUESS"
0 0 18 3 1 #" "
0 0 18 3 5 #"ERROR"
0 0 18 3 1 #")"
0 0 18 3 2 #"  "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 2 #"2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 89
(
 #";; find-fixed-point-iter-count : (number -> number) number number nu"
 #"mber -> pairOfnumbers"
) 0 0 24 29 1 #"\n"
0 0 18 3 67
#";; In this case number pair represents : (guess numberOfiterations)"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; Purpose : To find a fixed point of a given function f(x)=0."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 13 #";; template :"
0 0 24 29 1 #"\n"
0 0 18 3 53 #";;(define (find-fixed-point-iter-count f guess error)"
0 0 24 29 1 #"\n"
0 0 18 3 40 #";;  (find-fixed-point f ...guess error))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 27 #"find-fixed-point-iter-count"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 15 #"is-good-enough?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 18 3 41 #";; round guesses to be able to test them."
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"real?"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"round"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 1 #" "
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 3 #"   "
0 0 24 3 2 #"  "
0 0 24 3 5 #"     "
0 0 24 3 1 #" "
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 24 3 1 #"("
0 0 14 3 1 #"m"
0 0 14 3 1 #"a"
0 0 14 3 1 #"k"
0 0 14 3 13 #"e-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 14 3 2 #"gu"
0 0 14 3 1 #"e"
0 0 14 3 2 #"ss"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 3 1 #" "
0 0 24 3 5 #"     "
0 0 24 3 10 #"          "
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 5 #"limit"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 3 1 #"("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 3 1 #")"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 5 #"inner"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 92
(
 #";; find-root-with-iteration-count : (number -> number) number number"
 #" number -> pairOfnumbers"
) 0 0 24 29 1 #"\n"
0 0 18 3 67
#";; In this case number pair represents : (guess numberOfiterations)"
0 0 24 29 1 #"\n"
0 0 18 3 86
(
 #";; Purpose : To find root of a function of we say polynomial while k"
 #"eeping iter count."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 30 #"find-root-with-iteration-count"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 27 #"find-fixed-point-iter-count"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 16 #"make-fixed-point"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"guess"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"error"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 5 #"limit"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 12 #"check-expect"
0 0 18 3 2 #" ("
0 0 18 3 30 #"find-root-with-iteration-count"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 13 #"INITIAL-GUESS"
0 0 18 3 1 #" "
0 0 18 3 5 #"ERROR"
0 0 18 3 1 #" "
0 0 18 3 15 #"ITERATION-LIMIT"
0 0 18 3 1 #")"
0 0 18 3 1 #"'"
0 0 18 3 1 #"("
0 0 18 3 3 #"0.0"
0 0 18 3 1 #" "
0 0 18 3 1 #"4"
0 0 18 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 12 #"check-expect"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 30 #"find-root-with-iteration-count"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 13 #"INITIAL-GUESS"
0 0 18 3 1 #" "
0 0 18 3 5 #"ERROR"
0 0 18 3 1 #" "
0 0 18 3 15 #"ITERATION-LIMIT"
0 0 18 3 1 #")"
0 0 18 3 1 #"'"
0 0 18 3 1 #"("
0 0 18 3 4 #"-0.0"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 12 #"check-expect"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 30 #"find-root-with-iteration-count"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"+"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"*"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 13 #"INITIAL-GUESS"
0 0 18 3 1 #" "
0 0 18 3 5 #"ERROR"
0 0 18 3 1 #" "
0 0 18 3 15 #"ITERATION-LIMIT"
0 0 18 3 1 #")"
0 0 18 3 1 #"'"
0 0 18 3 1 #"("
0 0 18 3 3 #"0.0"
0 0 18 3 1 #" "
0 0 18 3 1 #"7"
0 0 18 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 18 3 72
(
 #";; multiple-root-find: (number -> number) number -> listof listOfnum"
 #"bers"
) 0 0 24 29 1 #"\n"
0 0 18 3 80
(
 #";; Purpose : to find multiple roots of a polynomial by trying multip"
 #"le guesses. "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 12 #";; Template:"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";(define (multiple-root-find f guess-count)"
0 0 24 29 1 #"\n"
0 0 18 3 7 #";  (map"
0 0 24 29 1 #"\n"
0 0 18 3 58
#";  ....(find-fixed-point-iter-count f guess error limit)))"
0 0 24 29 1 #"\n"
0 0 18 3 6 #"; ...)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 18 #"multiple-root-find"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 11 #"guess-count"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 27 #"find-fixed-point-iter-count"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 5 #"limit"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 3 1 #"("
0 0 14 3 20 #"create-list-of-guess"
0 0 24 3 1 #" "
0 0 14 3 11 #"guess-count"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; create-list-of-guess : number -> listOfnumbers"
0 0 24 29 1 #"\n"
0 0 18 3 39 #";; Purpose: To create a list of guesses"
0 0 24 29 1 #"\n"
0 0 18 3 12 #";; Template:"
0 0 24 29 1 #"\n"
0 0 18 3 40 #";; (define (create-list-of-guess number)"
0 0 24 29 1 #"\n"
0 0 18 3 25 #";;   (build-list...) ...)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 20 #"create-list-of-guess"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 5 #"range"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 22 3 4 #"-0.5"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 22 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 22 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 15 #"is-good-enough?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 18 #"multiple-root-find"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 30 #"find-root-with-iteration-count"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 9 #"find-root"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"test"
0 0 24 3 1 #")"
0           0
